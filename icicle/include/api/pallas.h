// WARNING: This file is auto-generated by a script.
// Any changes made to this file may be overwritten.
// Please modify the code generation script instead.
// Path to the code generation script: scripts/gen_c_api.py

#pragma once
#ifndef PALLAS_API_H
#define PALLAS_API_H

#include <cuda_runtime.h>
#include "gpu-utils/device_context.cuh"
#include "merkle-tree/merkle.cuh"
#include "matrix/matrix.cuh"
#include "curves/params/pallas.cuh"
#include "ntt/ntt.cuh"
#include "msm/msm.cuh"
#include "vec_ops/vec_ops.cuh"

extern "C" cudaError_t pallas_precompute_msm_bases_cuda(
  pallas::affine_t* bases,
  int msm_size,
  msm::MSMConfig& config,
  pallas::affine_t* output_bases);

extern "C" cudaError_t pallas_msm_cuda(
  const pallas::scalar_t* scalars, const pallas::affine_t* points, int msm_size, msm::MSMConfig& config, pallas::projective_t* out);

extern "C" bool pallas_eq(pallas::projective_t* point1, pallas::projective_t* point2);

extern "C" void pallas_to_affine(pallas::projective_t* point, pallas::affine_t* point_out);

extern "C" void pallas_generate_projective_points(pallas::projective_t* points, int size);

extern "C" void pallas_generate_affine_points(pallas::affine_t* points, int size);

extern "C" cudaError_t pallas_affine_convert_montgomery(
  pallas::affine_t* d_inout, size_t n, bool is_into, device_context::DeviceContext& ctx);

extern "C" cudaError_t pallas_projective_convert_montgomery(
  pallas::projective_t* d_inout, size_t n, bool is_into, device_context::DeviceContext& ctx);

extern "C" cudaError_t pallas_ecntt_cuda(
  const pallas::projective_t* input, int size, ntt::NTTDir dir, ntt::NTTConfig<pallas::scalar_t>& config, pallas::projective_t* output);

extern "C" cudaError_t pallas_initialize_domain(
  pallas::scalar_t* primitive_root, device_context::DeviceContext& ctx, bool fast_twiddles_mode);

extern "C" cudaError_t pallas_ntt_cuda(
  const pallas::scalar_t* input, int size, ntt::NTTDir dir, ntt::NTTConfig<pallas::scalar_t>& config, pallas::scalar_t* output);

extern "C" cudaError_t pallas_release_domain(device_context::DeviceContext& ctx);

extern "C" void pallas_generate_scalars(pallas::scalar_t* scalars, int size);

extern "C" cudaError_t pallas_scalar_convert_montgomery(
  pallas::scalar_t* d_inout, size_t n, bool is_into, device_context::DeviceContext& ctx);

extern "C" cudaError_t pallas_mul_cuda(
  pallas::scalar_t* vec_a, pallas::scalar_t* vec_b, int n, vec_ops::VecOpsConfig& config, pallas::scalar_t* result);

extern "C" cudaError_t pallas_add_cuda(
  pallas::scalar_t* vec_a, pallas::scalar_t* vec_b, int n, vec_ops::VecOpsConfig& config, pallas::scalar_t* result);

extern "C" cudaError_t pallas_accumulate_cuda(
  pallas::scalar_t* vec_a, pallas::scalar_t* vec_b, int n, vec_ops::VecOpsConfig& config);

extern "C" cudaError_t pallas_sub_cuda(
  pallas::scalar_t* vec_a, pallas::scalar_t* vec_b, int n, vec_ops::VecOpsConfig& config, pallas::scalar_t* result);

extern "C" cudaError_t pallas_mul_mat_cuda(
  pallas::scalar_t* vec_a, pallas::scalar_t* mat, int* row_ptr, int* col_idx, int n_rows, int n_cols, vec_ops::VecOpsConfig& config, pallas::scalar_t* result);

extern "C" cudaError_t pallas_prepare_matrix_cuda(
  pallas::scalar_t* mat,
  int* row_ptr,
  int* col_idx,
  int* sparse_to_original,
  int* dense_to_original,
  int num_sparse_rows,
  int num_dense_rows,
  device_context::DeviceContext& ctx,
  HybridMatrix<pallas::scalar_t>* output);

extern "C" cudaError_t pallas_compute_t_cuda(
  HybridMatrix<pallas::scalar_t>* a,
  HybridMatrix<pallas::scalar_t>* b,
  HybridMatrix<pallas::scalar_t>* c,
  pallas::scalar_t* z1_u,
  pallas::scalar_t* z1_x,
  pallas::scalar_t* z1_qw,
  pallas::scalar_t* z2_u,
  pallas::scalar_t* z2_x,
  pallas::scalar_t* z2_qw,
  pallas::scalar_t* e,
  int n_pub,
  int n_rows,
  int n_cols,
  device_context::DeviceContext& ctx,
  pallas::scalar_t* result);

extern "C" cudaError_t pallas_update_e_cuda(
  pallas::scalar_t* e,
  pallas::scalar_t* t,
  pallas::scalar_t* r,
  int n,
  device_context::DeviceContext& ctx);

extern "C" cudaError_t pallas_return_e_cuda(
  pallas::scalar_t* d_e,
  int n,
  device_context::DeviceContext& ctx,
  pallas::scalar_t* h_e);

extern "C" cudaError_t pallas_transpose_matrix_cuda(
  const pallas::scalar_t* input,
  uint32_t row_size,
  uint32_t column_size,
  pallas::scalar_t* output,
  device_context::DeviceContext& ctx,
  bool on_device,
  bool is_async);

extern "C" cudaError_t pallas_bit_reverse_cuda(
  const pallas::scalar_t* input, uint64_t n, vec_ops::BitReverseConfig& config, pallas::scalar_t* output);


extern "C" cudaError_t pallas_build_merkle_tree(
  const pallas::scalar_t* leaves,
  pallas::scalar_t* digests,
  unsigned int height,
  unsigned int input_block_len, 
  const hash::Hasher<pallas::scalar_t, pallas::scalar_t>* compression,
  const hash::Hasher<pallas::scalar_t, pallas::scalar_t>* bottom_layer,
  const merkle_tree::TreeBuilderConfig& tree_config);

  extern "C" cudaError_t pallas_mmcs_commit_cuda(
    const matrix::Matrix<pallas::scalar_t>* leaves,
    unsigned int number_of_inputs,
    pallas::scalar_t* digests,
    const hash::Hasher<pallas::scalar_t, pallas::scalar_t>* hasher,
    const hash::Hasher<pallas::scalar_t, pallas::scalar_t>* compression,
    const merkle_tree::TreeBuilderConfig& tree_config);

#endif