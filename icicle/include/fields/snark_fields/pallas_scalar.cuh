#pragma once
#ifndef PALLAS_SCALAR_PARAMS_H
#define PALLAS_SCALAR_PARAMS_H

#include "fields/storage.cuh"
#include "fields/field.cuh"

namespace pallas {
  struct fp_config {
    static constexpr unsigned limbs_count = 8;
    static constexpr unsigned omegas_count = 32;
    static constexpr unsigned modulus_bit_count = 255;
    static constexpr unsigned num_of_reductions = 2;

    static constexpr storage<limbs_count> modulus = {0x00000001, 0x8c46eb21, 0x0994a8dd, 0x224698fc, 0x00000000, 0x00000000, 0x00000000, 0x40000000};
    static constexpr storage<limbs_count> modulus_2 = {0x00000002, 0x188dd642, 0x132951bb, 0x448d31f8, 0x00000000, 0x00000000, 0x00000000, 0x80000000};
    static constexpr storage<limbs_count> modulus_4 = {0x00000004, 0x311bac84, 0x2652a376, 0x891a63f0, 0x00000000, 0x00000000, 0x00000000, 0x00000000};
    static constexpr storage<limbs_count> neg_modulus = {0xffffffff, 0x73b914de, 0xf66b5722, 0xddb96703, 0xffffffff, 0xffffffff, 0xffffffff, 0xbfffffff};
    static constexpr storage<2 * limbs_count> modulus_wide = {0x00000001, 0x8c46eb21, 0x0994a8dd, 0x224698fc, 0x00000000, 0x00000000, 0x00000000, 0x40000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};
    static constexpr storage<2 * limbs_count> modulus_squared = {0x00000001, 0x188dd642, 0x992aebfc, 0x08a01dc3, 0x004ccf59, 0x97fae231, 0xf7ccfdaa, 0x8496d41a, 0x80000000, 0xc6237590, 0x04ca546e, 0x11234c7e, 0x00000000, 0x00000000, 0x00000000, 0x10000000};
    static constexpr storage<2 * limbs_count> modulus_squared_2 = {0x00000002, 0x311bac84, 0x3255d7f8, 0x11403b87, 0x00999eb2, 0x2ff5c462, 0xef99fb55, 0x092da835, 0x00000001, 0x8c46eb21, 0x0994a8dd, 0x224698fc, 0x00000000, 0x00000000, 0x00000000, 0x20000000};
    static constexpr storage<2 * limbs_count> modulus_squared_4 = {0x00000004, 0x62375908, 0x64abaff0, 0x2280770e, 0x01333d64, 0x5feb88c4, 0xdf33f6aa, 0x125b506b, 0x00000002, 0x188dd642, 0x132951bb, 0x448d31f8, 0x00000000, 0x00000000, 0x00000000, 0x40000000};

    static constexpr storage<limbs_count> m = {0xfffffffc, 0xcee4537b, 0xd9ad5c89, 0x76e59c0f, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff};
    static constexpr storage<limbs_count> one = {0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};
    static constexpr storage<limbs_count> zero = {0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};
    static constexpr storage<limbs_count> montgomery_r = {0xfffffffd, 0x5b2b3e9c, 0xe3420567, 0x992c350b, 0xffffffff, 0xffffffff, 0xffffffff, 0x3fffffff};
    static constexpr storage<limbs_count> montgomery_r_inv = {0x8e1a6f7f, 0x6119a3dd, 0x9dc601eb, 0xc68de127, 0xc050df13, 0x5790be58, 0x17647953, 0x1f7a89dd};

    static constexpr storage_array<omegas_count, limbs_count> omega = {
      {{0x00000000, 0x8c46eb21, 0x0994a8dd, 0x224698fc, 0x00000000, 0x00000000, 0x00000000, 0x40000000},
{0x4abeb917, 0x5d2f235b, 0x975fd343, 0x4a146505, 0x13c354eb, 0x7d65aa63, 0x5adfa118, 0x3691ce11},
{0xc04980a4, 0x1ba3a33b, 0x7c94ad2b, 0x7e538bca, 0xd09c17fe, 0xaa5f610e, 0xfb370430, 0x3a57bee9},
{0x66c85a9b, 0xeb492612, 0x05d27d7b, 0xace79f8e, 0x1cc6ac5d, 0x5bb6031a, 0x01699092, 0x196249e6},
{0x918303ec, 0xa42622b9, 0xf189da55, 0xf50c987a, 0xc45a2797, 0x1160f869, 0xd021fce5, 0x3ccd3ef9},
{0x68e08d79, 0x2e36062f, 0xb09aa3cf, 0x6bceb1fd, 0x77cca3c0, 0x7133d40f, 0x56cd522a, 0x396578a1},
{0x09e771c0, 0xabae64af, 0x7eec3017, 0xf672421e, 0x7a12eba4, 0xb0039509, 0xf9801aee, 0x0ac2b27d},
{0x6b26f170, 0xfb0d5b1b, 0x7d4dabe3, 0x0afad96d, 0x3be2e8a9, 0xbaa32f61, 0x1b842bf9, 0x0a81955d},
{0x92662205, 0x37c6cd03, 0xb61014b3, 0xe56f60e1, 0x24b30fd0, 0x248fbe74, 0xe2746ca7, 0x0a76b3ae},
{0xc157dc6a, 0x9776a573, 0x92d30969, 0x2a5e63e9, 0x9c89c941, 0x7f696cf2, 0x9ccd1de4, 0x0d54c4d2},
{0x742345b6, 0xfab7afba, 0xef9d23f5, 0x7bc1e694, 0x81196633, 0x125b967f, 0xf6d0105d, 0x3a3b5103},
{0x96072570, 0xcf2eecbb, 0x1feb7c9a, 0x07072be9, 0x94373069, 0xd4ce8017, 0xa0b04b71, 0x0d22c941},
{0x17ecbd27, 0xe615350f, 0x88418060, 0x9fa2a516, 0x43daf237, 0xedb1d709, 0xd933a822, 0x0c4f5749},
{0x68afbee7, 0x898b34d0, 0xc605d3bd, 0x4958e496, 0x9c537159, 0xb079b38d, 0x7024253b, 0x1e558768},
{0xd3edb265, 0xac4cdf0a, 0xf6af12c7, 0x5f4a103e, 0x674431f8, 0x36e280ae, 0x82b9c335, 0x130d1d64},
{0xfe315f99, 0xf3a89df3, 0x04d761ef, 0x05ec0174, 0x27b8876f, 0xa13142cc, 0x1565ebd8, 0x385e22fc},
{0x3a487e07, 0xf40dccdb, 0x9cb10369, 0x5a029f19, 0x93aaf976, 0xa5ddc357, 0xf549f3c7, 0x0fd6d647},
{0xa75258f4, 0x8d205918, 0x9b8f28bf, 0x67ed9877, 0x3b1d6ac9, 0xfc57b455, 0x71146b9e, 0x18c8fb7d},
{0x01c9889c, 0x8c3a5025, 0x318bbb44, 0x4c0c9a15, 0x9fb965c5, 0x6391fec6, 0x293f1cd8, 0x36c0b9b7},
{0x7fb34869, 0x29c2afb6, 0x08f92d26, 0xb5f9ce8d, 0xd1f43923, 0xa3615751, 0x1f6c4b14, 0x19e9df87},
{0x3ecb4413, 0x94e2302d, 0x2a7411da, 0xb86bd32a, 0xe2a550ae, 0x084628c5, 0x4fdb738d, 0x04a1bc27},
{0x47ee3450, 0x9a9dd830, 0x760e9fd6, 0x588fade0, 0x6806465f, 0x03d13727, 0xf82ecdd1, 0x347db234},
{0x020a4e9d, 0xd89d1db8, 0xe5f94fcf, 0x1e860361, 0x190dd620, 0x4a8efd19, 0xdbd8b6cf, 0x03d98188},
{0x7fa53afe, 0x102c8c2f, 0xbffdb012, 0x2ae72b37, 0x743f788b, 0x84e02261, 0x6d684acf, 0x144e6eba},
{0xc2c53be5, 0x13d61370, 0xef7b5d44, 0xd8040159, 0x9268c3ae, 0xf869d302, 0xaaeb95e8, 0x2d68745b},
{0xe2fef236, 0xde7fff0d, 0xca508eef, 0x3b1462bc, 0xa98b24be, 0xfebb3fe0, 0x48dc291b, 0x0f769a62},
{0x185ecc4e, 0x8232185f, 0xa0373d1b, 0xae7fcf04, 0x5c7d21d6, 0x38d3712a, 0x0039bf08, 0x24337311},
{0xc44f2989, 0xe8316602, 0xfae516ca, 0x9cf843b3, 0xa9708418, 0x91721c69, 0xfd6b479b, 0x3259338d},
{0xf7baea1f, 0x8f56c7e2, 0x55d303e0, 0xc54fa598, 0x2a14f4c2, 0x6fab3b89, 0xe730f918, 0x391c568a},
{0x50354bfd, 0x666cd374, 0xd5daf4fc, 0x425f8ef6, 0x6087325a, 0xb46faf30, 0xd5dcf6b3, 0x29839b52},
{0x89b96940, 0xa2e3cb01, 0xbf75b98f, 0xad889b9c, 0x8861545d, 0x7537dcfa, 0x2eed7ef6, 0x2454cd74},
{0x02b6d05f, 0xa70e2c11, 0xc106f049, 0x9bb97ea3, 0x492ae26e, 0x9e5c4dfd, 0x746d3f58, 0x2de6a9b8}}};

    static constexpr storage_array<omegas_count, limbs_count> omega_inv = {
      {{0x00000000, 0x8c46eb21, 0x0994a8dd, 0x224698fc, 0x00000000, 0x00000000, 0x00000000, 0x40000000},
{0xb54146ea, 0x2f17c7c5, 0x7234d59a, 0xd83233f6, 0xec3cab14, 0x829a559c, 0xa5205ee7, 0x096e31ee},
{0x1ddcfce1, 0xe3150bd4, 0xd267658d, 0xbd460deb, 0xe0b38401, 0x1bc537d6, 0xb6dbe8d2, 0x35440f7a},
{0xdc4630a5, 0x1d2af0ae, 0xd980ddb5, 0xbf91c3ea, 0xd4eba146, 0xbf5427ef, 0x0f7d7a40, 0x2f17b08c},
{0x7f179e94, 0x6189ddf8, 0x6aa86ef4, 0xef48c32c, 0x6f882c1f, 0xeb089ea4, 0x2c61568f, 0x10b8c79f},
{0x3842c8ab, 0xf06455fb, 0x4b3e901a, 0x7953aeb0, 0x4191fce4, 0x1eb59086, 0xbff7f3d0, 0x129e44ee},
{0x97bd7307, 0xc5469bb3, 0xbd1a888e, 0x4450daea, 0x0a71421e, 0x332e6e54, 0xb69ea42f, 0x33131f5f},
{0x65faeb71, 0x6408cc1e, 0x08bb2da1, 0xfac8758d, 0xe9e0d719, 0xa01ffdab, 0xe3ded08e, 0x05114db9},
{0x80aa787b, 0x9b0d8121, 0xa9404622, 0x776ca05e, 0xd11f23a3, 0x922522d5, 0x9807f694, 0x10d6366b},
{0x580e48a1, 0x56306b40, 0xe0800368, 0x68d50067, 0x5ac7d68c, 0xab1cdcb0, 0x551c2824, 0x3f3c27b2},
{0xf50b90f4, 0xd11173dd, 0x70d5271d, 0x633e4a61, 0xc661d100, 0xd45b5a69, 0x6e4195d9, 0x1953fa2a},
{0xc208ca36, 0xf54425b5, 0x401c7fd7, 0x6fdfeb95, 0x652feebb, 0x964735d3, 0x0f2de295, 0x36fa123f},
{0x05da87ff, 0xd0c9b9b3, 0x70a1f7c3, 0x2de80ab0, 0x09defaa2, 0x6abd5754, 0x19a2a7b0, 0x089fc884},
{0x40944219, 0xa9ddd6c0, 0x56280e64, 0xf840edb0, 0xf9f5c04f, 0x28d07ded, 0x384d3dcf, 0x2e5b35cd},
{0xa9a8dbfd, 0xfe92f745, 0xad76af2e, 0xcbaecfeb, 0x78cab4b3, 0xc13e028a, 0x4b6829d3, 0x20b836ae},
{0xea06ca92, 0xb114214d, 0xc87607f7, 0x9e935ab1, 0xd0e1e726, 0x0b3c4a27, 0x1cf0f559, 0x27d2eafd},
{0x51c2c35a, 0x2c8ca044, 0x1a23a014, 0xcfeba854, 0xfa1364f7, 0xb76694b2, 0x9e24b8f6, 0x320a2131},
{0x027d8e49, 0x32fcccc0, 0x4c8a5330, 0x4c38a2f9, 0x7e639216, 0x3bedd15c, 0x9038c5c7, 0x0d8131e7},
{0x7b1fba8d, 0xccc21c62, 0xf20c186a, 0x7d354574, 0x88f56b4a, 0x8d64acbf, 0xc3bdd14d, 0x2064d061},
{0xf02ffee4, 0x374a280f, 0x963cf8e0, 0xdb1e63cd, 0x6d8ceddd, 0xb3eabc48, 0x76cf5631, 0x1de56202},
{0xe91fab8e, 0x9d95cab3, 0xe8981044, 0x30052567, 0xd8805f89, 0x77c4bea7, 0xd8c887fc, 0x241a9f26},
{0xc331b320, 0x3f4841cb, 0x44e569a6, 0xf1f6ac57, 0x9269cfe0, 0x0236a9f4, 0x2c3738a7, 0x10d2ebcb},
{0xff6582ff, 0x067fce3a, 0x55456008, 0xaebd6648, 0x2ebf3136, 0xaf4ecd0e, 0xeae4e9d4, 0x185fd737},
{0xaa94eb65, 0x31d27b58, 0x730249de, 0x0c4056e7, 0x9e5c5831, 0x2611b81a, 0xb0cbc1e8, 0x08bd14ad},
{0xb833b95e, 0x0bbff533, 0x542a4cd3, 0x9c7d63cd, 0xcde4b787, 0x5ee0ce28, 0x8ce04532, 0x27e818c8},
{0x66eadd8e, 0x48f63383, 0x6c2f70e2, 0x6270bd76, 0xbcb9e142, 0xad33de16, 0xdedde09a, 0x1ecb39fd},
{0x8c1d62b9, 0x94febb8c, 0xc6ae09d1, 0x03c67f19, 0x635d073c, 0xdded1636, 0x764ae8b1, 0x24b6aa56},
{0xcb22339c, 0x197848f2, 0xee159075, 0x0a61e37f, 0xa965cdbd, 0xd02883f4, 0x9f01cbdb, 0x14345167},
{0xe8baf513, 0xb33ffbff, 0x65699a3a, 0x0073a6e5, 0x910fed35, 0x8d0aedbe, 0x63f84612, 0x1045b53b},
{0xfbe258b6, 0x9d9ebcba, 0x7eba8b94, 0x36447da5, 0xe5424603, 0x8538b299, 0x4f0dc404, 0x37b0346c},
{0xbcbb6981, 0x40d232b4, 0x43044e1a, 0x4a29e77b, 0x9719aeda, 0xd2ec4880, 0x54ff4e02, 0x39759d17},
{0xa84b6836, 0x57eecda0, 0x84b8a80c, 0x4ad38b90, 0x124086c1, 0xf4c8f353, 0x415bf936, 0x2235e1a7}}};

    static constexpr storage_array<omegas_count, limbs_count> inv = {
      {{0x80000001, 0xc6237590, 0x04ca546e, 0x11234c7e, 0x00000000, 0x00000000, 0x00000000, 0x20000000},
{0xc0000001, 0x29353058, 0x072f7ea6, 0x19b4f2bd, 0x00000000, 0x00000000, 0x00000000, 0x30000000},
{0xe0000001, 0xdabe0dbc, 0x886213c1, 0x1dfdc5dc, 0x00000000, 0x00000000, 0x00000000, 0x38000000},
{0xf0000001, 0xb3827c6e, 0x48fb5e4f, 0x20222f6c, 0x00000000, 0x00000000, 0x00000000, 0x3c000000},
{0xf8000001, 0x9fe4b3c7, 0x29480396, 0x21346434, 0x00000000, 0x00000000, 0x00000000, 0x3e000000},
{0x7c000001, 0x1615cf74, 0x196e563a, 0x21bd7e98, 0x00000000, 0x00000000, 0x00000000, 0x3f000000},
{0xbe000001, 0xd12e5d4a, 0x11817f8b, 0x22020bca, 0x00000000, 0x00000000, 0x00000000, 0x3f800000},
{0xdf000001, 0xaebaa435, 0x0d8b1434, 0x22245263, 0x00000000, 0x00000000, 0x00000000, 0x3fc00000},
{0x6f800001, 0x1d80c7ab, 0x8b8fde89, 0x223575af, 0x00000000, 0x00000000, 0x00000000, 0x3fe00000},
{0x37c00001, 0x54e3d966, 0xca9243b3, 0x223e0755, 0x00000000, 0x00000000, 0x00000000, 0x3ff00000},
{0x9be00001, 0x70956243, 0xea137648, 0x22425028, 0x00000000, 0x00000000, 0x00000000, 0x3ff80000},
{0x4df00001, 0xfe6e26b2, 0x79d40f92, 0x22447492, 0x00000000, 0x00000000, 0x00000000, 0x3ffc0000},
{0xa6f80001, 0x455a88e9, 0x41b45c38, 0x224586c7, 0x00000000, 0x00000000, 0x00000000, 0x3ffe0000},
{0x537c0001, 0xe8d0ba05, 0xa5a4828a, 0x22460fe1, 0x00000000, 0x00000000, 0x00000000, 0x3fff0000},
{0x29be0001, 0x3a8bd293, 0xd79c95b4, 0x2246546e, 0x00000000, 0x00000000, 0x00000000, 0x3fff8000},
{0x14df0001, 0xe3695eda, 0x70989f48, 0x224676b5, 0x00000000, 0x00000000, 0x00000000, 0x3fffc000},
{0x8a6f8001, 0x37d824fd, 0xbd16a413, 0x224687d8, 0x00000000, 0x00000000, 0x00000000, 0x3fffe000},
{0x4537c001, 0x620f880f, 0x6355a678, 0x2246906a, 0x00000000, 0x00000000, 0x00000000, 0x3ffff000},
{0x229be001, 0xf72b3998, 0x367527aa, 0x224694b3, 0x00000000, 0x00000000, 0x00000000, 0x3ffff800},
{0x914df001, 0x41b9125c, 0xa004e844, 0x224696d7, 0x00000000, 0x00000000, 0x00000000, 0x3ffffc00},
{0xc8a6f801, 0xe6fffebe, 0xd4ccc890, 0x224697e9, 0x00000000, 0x00000000, 0x00000000, 0x3ffffe00},
{0xe4537c01, 0x39a374ef, 0xef30b8b7, 0x22469872, 0x00000000, 0x00000000, 0x00000000, 0x3fffff00},
{0x7229be01, 0x62f53008, 0x7c62b0ca, 0x224698b7, 0x00000000, 0x00000000, 0x00000000, 0x3fffff80},
{0xb914df01, 0xf79e0d94, 0xc2fbacd3, 0x224698d9, 0x00000000, 0x00000000, 0x00000000, 0x3fffffc0},
{0xdc8a6f81, 0xc1f27c5a, 0xe6482ad8, 0x224698ea, 0x00000000, 0x00000000, 0x00000000, 0x3fffffe0},
{0xee4537c1, 0x271cb3bd, 0x77ee69db, 0x224698f3, 0x00000000, 0x00000000, 0x00000000, 0x3ffffff0},
{0x77229be1, 0x59b1cf6f, 0xc0c1895c, 0x224698f7, 0x00000000, 0x00000000, 0x00000000, 0x3ffffff8},
{0x3b914df1, 0xf2fc5d48, 0xe52b191c, 0x224698f9, 0x00000000, 0x00000000, 0x00000000, 0x3ffffffc},
{0x9dc8a6f9, 0x3fa1a434, 0xf75fe0fd, 0x224698fa, 0x00000000, 0x00000000, 0x00000000, 0x3ffffffe},
{0xcee4537d, 0x65f447aa, 0x807a44ed, 0x224698fb, 0x00000000, 0x00000000, 0x00000000, 0x3fffffff},
{0xe77229bf, 0x791d9965, 0xc50776e5, 0x224698fb, 0x00000000, 0x00000000, 0x80000000, 0x3fffffff},
{0x73b914e0, 0x82b24243, 0xe74e0fe1, 0x224698fb, 0x00000000, 0x00000000, 0xc0000000, 0x3fffffff}}};
  };

  /**
   * Scalar field. Is always a prime field.
   */
  typedef Field<fp_config> scalar_t;
} // namespace pallas

#endif
